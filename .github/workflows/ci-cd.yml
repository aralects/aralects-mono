name: Aralects Monorepo CI/CD

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  LANDING_IMAGE: ${{ secrets.DOCKER_USERNAME }}/aralects-landing
  DEMO_IMAGE: ${{ secrets.DOCKER_USERNAME }}/aralects-demo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and Push Landing Page (Port 80)
        run: |
          docker build -t $LANDING_IMAGE:${{ github.sha }} -f Dockerfile-website .
          docker push $LANDING_IMAGE:${{ github.sha }}

      - name: Build and Push Demo (Port 3000)
        run: |
          docker build -t $DEMO_IMAGE:${{ github.sha }} -f Dockerfile-demo .
          docker push $DEMO_IMAGE:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            # Authenticate Docker on EC2
            echo "${{ env.DOCKER_TOKEN }}" | docker login --username "${{ env.DOCKER_USERNAME }}" --password-stdin

            # Deploy Landing Page (Port 80)
            docker pull $LANDING_IMAGE:${{ github.sha }}
            docker stop aralects-landing || true
            docker rm aralects-landing || true
            docker run -d -p 80:80 --name aralects-landing $LANDING_IMAGE:${{ github.sha }}

            # Deploy Demo (Port 3000)
            docker pull $DEMO_IMAGE:${{ github.sha }}
            docker stop aralects-demo || true
            docker rm aralects-demo || true
            docker run -d -p 3000:3000 --name aralects-demo $DEMO_IMAGE:${{ github.sha }}

            # Verify that both containers are running
            if ! docker ps -q --filter name=aralects-landing | grep -q .; then
              echo "Landing page container failed!"
              exit 1
            fi
            if ! docker ps -q --filter name=aralects-demo | grep -q .; then
              echo "Demo container failed!"
              exit 1
            fi
